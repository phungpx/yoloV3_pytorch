data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          imsize: 416
          dirnames:
            - '''dataset/electronic_components/train/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
          transforms:
            - iaa.MotionBlur()
            - iaa.ChangeColorTemperature()
            - iaa.GaussianBlur(sigma=(0, 1))
            - iaa.Grayscale(alpha=(0.0, 1.0))
            - iaa.Add(value=(-50, 50), per_channel=True)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1), keep_size=False)
            # - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            # - iaa.Affine(rotate=(0, 360), shear=(-2, 2), fit_output=True)
      batch_size: 4
      shuffle: True
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          imsize: 416
          dirnames:
            - '''dataset/electronic_components/valid/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
      batch_size: 4
      shuffle: False
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          imsize: 416
          dirnames:
            - '''dataset/electronic_components/valid/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
      batch_size: 4
      shuffle: False
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

loss:
  module: core.loss.yolo_loss
  class: YOLOLoss
  YOLOLoss:
    lambda_obj: 1
    lambda_noobj: 10
    lambda_bbox: 1
    lambda_class: 1
    input_size: 416
    scales: [13, 26, 52]
    anchor_sizes: [
      [[116.48, 91.52], [158.08, 199.68], [374.4, 324.48]],  # S = 13
      [[29.12, 62.4 ], [62.4, 45.76], [58.24, 120.64]],  # S = 26
      [[8.32, 12.48], [16.64, 29.12], [33.28, 24.96]],  # S = 52
    ]

model:
  module: core.model.model
  class: Model
  Model:
    weight_path: '''checkpoint/pretrained_weight/78.1map_0.2threshold_PASCAL.tar'''
    in_channels: 3
    num_classes: 5

optim:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.0001
    weight_decay: 0.0001

lr_scheduler:
  module: core.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    evaluator_name: '''valid'''
    score_name: '''loss'''
    optim: config['optim']
    mode: '''min'''
    factor: 0.1
    patience: 3
    verbose: True

early_stopping:
  module: core.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    evaluator_name: '''valid'''
    score_name: '''loss'''
    patience: 50
    delta: 0
    mode: '''min'''

metric:
  module: core.handlers.evaluator
  class: Metrics
  Metrics:
    metrics:
      # mAP:
      #   module: core.metric.evaluator
      #   class: Evaluator
      #   Evaluator:
      #     eval_fn:
      #       module: core.metric.mAP
      #       class: MeanAveragePrecision
      #       MeanAveragePrecision:
      #         classes:
      #           EPASS: 0
      #         iou_threshold: 0.5
      #         method: '''every_point_interpolation'''
      #         print_FP_files: False
      #     output_transform: 'lambda x: (x[0], x[1], x[2])'
      loss:
        module: core.metric.loss
        class: Loss
        Loss:
          loss_fn: config['loss']
          output_transform: 'lambda x: (x[0], x[1])'  # preds, targets

writer:
  module: core.handlers.writer
  class: Writer
  Writer:
    save_dir: '''checkpoint/electronic_components/'''

plotter:
  module: core.handlers.plotter
  class: Plotter
  Plotter:
    save_dir: '''checkpoint/electronic_components/'''

logger:
  module: core.handlers.logger
  class: Logger
  Logger:
    save_dir: '''checkpoint/electronic_components/'''
    mode: logging.DEBUG
    format: '''%(asctime)s - %(name)s - %(levelname)s - %(message)s'''

model_inspection:
  module: core.handlers.model_inspection
  class: ModelInspection
  ModelInspection:
    verbose: True
    input_shape: '(416, 416, 3)'

trainer:
  module: core.engine
  class: Trainer
  Trainer:
    project_name: '''YOLOV3'''
    data:
      train: config['data']['train']
      train_eval: config['data']['train']
      valid: config['data']['valid']
      # test: config['data']['valid']
    model: config['model']
    loss: config['loss']
    optim: config['optim']
    metric: config['metric']
    early_stopping: config['early_stopping']
    lr_scheduler: config['lr_scheduler']
    logger: config['logger']
    writer: config['writer']
    plotter: config['plotter']
    model_inspection: config['model_inspection']
    save_dir: '''checkpoint/electronic_components/'''

extralibs:
  torch: torch
  logging: logging
  iaa: imgaug.augmenters
