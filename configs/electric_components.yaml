data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          image_size: 416
          dirnames:
            - '''../test_dataset/train/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
          transforms:
            - iaa.MotionBlur()
            - iaa.ChangeColorTemperature()
            - iaa.GaussianBlur(sigma=(0, 1))
            - iaa.Grayscale(alpha=(0.0, 1.0))
            - iaa.Add(value=(-50, 50), per_channel=True)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1), keep_size=False)
            # - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            # - iaa.Affine(rotate=(0, 360), shear=(-2, 2), fit_output=True)
      batch_size: 4
      shuffle: True
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          image_size: 416
          dirnames:
            - '''../test_dataset/valid/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
      batch_size: 4
      shuffle: False
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          image_size: 416
          dirnames:
            - '''../test_dataset/valid/'''
          image_patterns: ['''*.jpg''', '''*.JPG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            capacitor: 0
            diode: 1
            IC: 2
            resistor: 3
            transistor: 4
      batch_size: 4
      shuffle: False
      num_workers: 2
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

loss:
  module: flame.core.loss.yolov3_loss
  class: YOLOv3Loss
  YOLOv3Loss:
    lambda_obj: 1
    lambda_noobj: 10
    lambda_bbox: 1
    lambda_class: 1
    image_size: 416
    scales: [13, 26, 52]
    anchor_sizes: [
      [[116.48, 91.52], [158.08, 199.68], [374.4, 324.48]],  # S = 13
      [[29.12, 62.4 ], [62.4, 45.76], [58.24, 120.64]],  # S = 26
      [[8.32, 12.48], [16.64, 29.12], [33.28, 24.96]],  # S = 52
    ]

model:
  module: flame.core.model.model
  class: Model
  Model:
    weight_path: '''../78.1map_0.2threshold_PASCAL.tar'''
    in_channels: 3
    num_classes: 5

optim:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.0001
    weight_decay: 0.0001

train_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['train_eval']
    device: '''cuda'''

valid_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['valid']
    device: '''cuda'''

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      loss:
        module: flame.handlers.metrics.loss.loss
        class: Loss
        Loss:
          loss_fn:
            module: flame.handlers.metrics.loss.yolov3_loss
            class: YOLOv3Loss
            YOLOv3Loss:
              lambda_obj: 1
              lambda_noobj: 10
              lambda_bbox: 1
              lambda_class: 1
              image_size: 416
              scales: [13, 26, 52]
              anchor_sizes: [
                [[116.48, 91.52], [158.08, 199.68], [374.4, 324.48]],  # S = 13
                [[29.12, 62.4 ], [62.4, 45.76], [58.24, 120.64]],  # S = 26
                [[8.32, 12.48], [16.64, 29.12], [33.28, 24.96]],  # S = 52
              ]
          output_transform: 'lambda x: (x[0], x[1])'
    attach_to:
      train_evaluator: '''train'''
      valid_evaluator: '''valid'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''train''' 
      - '''valid'''

history:
  module: flame.handlers.checkpoint
  class: History

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

terminate_on_nan:
  module: flame.handlers.terminate_on_nan
  class: TerminateOnNan

lr_scheduler:
  module: flame.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    score_name: '''loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 3
    verbose: True

early_stopping:
  module: flame.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    score_name: '''loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 10

best_saver:
  module: flame.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/vehicle_registration/'''
    score_name: '''loss'''
    mode: '''min'''
    evaluator_name: '''valid_evaluator'''
    n_saved: 1

backup_saver:
  module: flame.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules:
      - '''model'''
      - '''optim'''
      - '''backup_saver'''
      - '''best_saver'''
      - '''history'''
      - '''lr_scheduler'''
      - '''early_stopping'''
    dirname: '''checkpoint/vehicle_registration/'''
    save_interval: 1
    n_saved: 1

engine:
  module: flame.core.engine.trainer
  class: Trainer
  Trainer:
    dataset: config['data']['train']
    device: '''cuda'''
    max_epochs: 100

extralibs:
  torch: torch
  iaa: imgaug.augmenters
